Install Python 3.x in CentOS / RedHat 6.x from sources
http://www.sromero.org/wiki/linux/aplicaciones/python/python34_centos6


CentOS and RedHat 6.x ship with Python 2, so you cannot/shouldn't install Python 3 
at the system level (with or without the package manager). But you can setup Python 3.x (3.4.3 in our example below)
in a separate "virtualenv" environment, not affecting the system packages and allowing you to develop Python 3.x programs.

You may already have Python installed on your server, you can verify using:
# which python 
/usr/bin/python 
# python --version 
Python 2.6.6
For this install we want to leave existing Python packages and executables in place. 

As we're going to compile python3, we need to install the required development packages:
# yum groupinstall "Development tools"
# yum install zlib-devel bzip2-devel openssl-devel ncurses-devel zx-devel \
      sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel
      python-devel libffi-devel
以上这些必要的基础依赖，在以后其他组件的安装及使用过程中需要用到，所以要提前装好
对于基础依赖，要有个共识印象
      
Download Python 3.4 sources and compile / install them :
# cd /usr/local/src
# wget https://www.python.org/ftp/python/3.4.3/Python-3.4.3.tar.xz --no-check-certificate
# tar xf Python-3.4.3.tar.xz
# cd Python-3.4.3
# ./configure --prefix=/usr/local --enable-shared LDFLAGS="-Wl,-rpath /usr/local/lib"
# make && sudo make altinstall
(
if you don't want to overwrite the python executable (safer, at least on some distros yum needs python to be 2.x, such as for RHEL6)
- you can install python3.* as a concurrent instance to the system default with an altinstall:
)
Python3自带安装pip和setuptools
# /usr/local/bin/python3.4 --version

Finally, create a link to Python 3 executable for easy usage:
# ln -s /usr/local/bin/python3 /usr/bin/python3
And check:
# python3 --version 
Python 3.3.2
ln -s /usr/local/bin/pip3.4 /usr/bin/pip3  //将pip也链接好 方便使用

如果是Python2没有自带安装pip，需要再次安装pip
# wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py
# /usr/local/bin/python3.4 ez_setup.py
# /usr/local/bin/easy_install-3.4 pip




ez_setup.py    python-setuptools    easy_install     pip    egg文件   wheel  （https://packaging.python.org/en/latest/projects）
python-devel

Python模块常用的几种安装方式（http://blog.163.com/yang_jianli/blog/static/161990006201162152724339/）

一、方法1： 单文件模块
直接把文件拷贝到 $python_dir/Lib

二、方法2： 多文件模块，带setup.py
下载模块包，进行解压，进入模块文件夹，执行：
python setup.py install

三、 方法3：easy_install 方式
 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装，之后就可以使用easy_install进行安装package了。
  easy_install  packageName
  easy_install  package.egg

四、 方法4：pip 方式 
先进行pip工具的安裝：easy_install pip（pip 可以通过easy_install 安裝，而且也会装到 Scripts 文件夹下。）
安裝：pip install PackageName
更新：pip install -U PackageName
移除：pip uninstall PackageName
搜索：pip search PackageName
帮助：pip help

注：虽然Python的模块可以拷贝安装，但是一般情况下推荐制作一个安装包，即写一个setup.py文件来安装。
setup.py文件的使用如下:
% python setup.py build     #编译
% python setup.py install    #安装
% python setup.py sdist      #制作分发包
% python setup.py bdist_wininst    #制作windows下的分发包
% python setup.py bdist_rpm

setup.py文件的编写
setup.py中主要执行一个 setup函数，该函数中大部分是描述性东西，最主要的是packages参数，列出所有的package，
可以用自带的find_packages来动态获取package。所以setup.py文件的编写实际是很简单的。
简单的例子:
setup.py文件：

 from setuptools import setup, find_packages
setup(
       name = " mytest " ,
       version = " 0.10 " ,
       description = " My test module " ,
       author = " Robin Hood " ,
       url = " http://www.csdn.net " ,
       license = " LGPL " ,
       packages = find_packages(),
       scripts = [ " scripts/test.py " ],
       )

mytest.py

import sys
def get():
     return sys.path

scripts/test.py

import os
print os.environ.keys() 

setup中的scripts表示将该文件放到 Python的Scripts目录下，可以直接用。OK，简单的安装成功，可以运行所列举的命令生成安装包，
或者安装该python包。








ez_setup.py
The recommended way to bootstrap setuptools on any system is to download ez_setup.py and run it using the target Python environment
Most Linux distributions come with wget.
Download ez_setup.py and run it using the target Python version. The script will download the appropriate version and install it for you:
> wget https://bootstrap.pypa.io/ez_setup.py -O - | python
(
Note that on some older systems (noted on Debian 6 and CentOS 5 installations),wget may refuse to download ez_setup.py
> wget --no-check-certificate https://bootstrap.pypa.io/ez_setup.py
> python ez_setup.py --insecure
)
只需要一个大约 8K 作为的脚本ez_setup.py，就能自动为用户安装包括 setuptools 自身在内的许多 Python 包。 
使用这种方式，用户只需要下载 ez_setup。py 并运行，就可以自动下载和安装适合用户当前 Python 版本的适当的
setuptools egg 文件。此外，这段脚本还会将可执行的 easy_install 脚本安装到用户所有的操作系统 Python 可执行脚本正常应该安装的位置

easy_install
easy_install was released in 2004, as part of setuptools. 
It was notable at the time for installing packages from PyPI using requirement specifiers, and automatically installing dependencies.

pip
pip came later in 2008, as alternative to easy_install, although still largely built on top of setuptools components. 
It was notable at the time for not installing packages as Eggs or from Eggs (but rather simply as ‘flat’ packages from sdists), 
and introducing the idea of Requirements Files, which gave users the power to easily replicate environments.



操作系统源安装：pip setuptools wheel
https://packaging.python.org/en/latest/install_requirements_linux/#installing-pip-setuptools-wheel-with-linux-package-managers
CentOS and RHEL don’t offer pip or wheel in their core repositories, although setuptools is installed by default.
To install pip and wheel for the system Python, there are two options:

Enable the EPEL repository using these instructions. On EPEL 6 and EPEL7, you can install pip like so:
sudo yum install python-pip
On EPEL 7 (but not EPEL 6), you can install wheel like so:
sudo yum install python-wheel
Since EPEL only offers extra, non-conflicting packages, EPEL does not offer setuptools, since it’s in the core repository.

Enable the PyPA Copr Repo using these instructions [1]. You can install pip and wheel like so:
sudo yum install python-pip python-wheel
To additionally upgrade setuptools, run:
sudo yum upgrade python-setuptools



pip:
pip has a number of subcommands: “search”, “install”, “uninstall”, “freeze”, "list",etc

To use a package from this index either "pip install package" (get pip)
or download, unpack and "python setup.py install" it.
To install the latest version of “SomeProject”:
pip install 'SomeProject'
To install a specific version:
pip install 'SomeProject==1.4'
To install greater than or equal to one version and less than another:
pip install 'SomeProject>=1,<2'
To install a version that’s “compatible” with a certain version: [4]
pip install 'SomeProject~=1.4.2'
In this case, this means to install any version “==1.4.*” version that’s also “>=1.4.2”.
（https://packaging.python.org/en/latest/projects）

Installing with get-pip.py
To install pip, securely download get-pip.py（https://bootstrap.pypa.io/get-pip.py）
Then run the following:
python get-pip.py

get-pip.py will also intall setuptools （Beginning with pip v1.5.1, get-pip.py stopped requiring setuptools to be installed first.
） and wheel, if they're not already. 
setuptools is required to install source distributions.
Both are required to be able to build a Wheel Cache (which improves installation speed),
although neither are required to install pre-built wheels.
//end pip



Python包列表：
https://pypi.python.org/pypi?%3Aaction=index

sql-to-graphite 0.0.6	                A tool to send SQL results to Graphite






python的版本兼容问题
比如说graphite的setup.py脚本中第四行还是import ConfigParser
 The ConfigParser module has been renamed to configparser in Python 3. 
 The 2to3 tool will automatically adapt imports when converting your sources to Python 3.
 /usr/local/bin/2to3-3.4 setup.py //对比并打印出在Python2和Python3下 setup.py的代码不同之处
 /usr/local/bin/2to3-3.4 -w setup.py //将Python2版本代码修改成Python版本代码，并将源文件备份
